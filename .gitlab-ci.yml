stages:          # List of stages for jobs, and their order of execution
  - Install_tools
  - test
  - security
  - build
  - docker
  - deploy
  
Install_nodejs_docker_trivy_kubectl:
  stage: Install_tools
  script:
    - echo "üì¶ Updating system packages..."
    - sudo apt-get update -y

    - echo "üê≥ Installing Docker..."
    - sudo apt-get install -y docker.io
    - sudo chmod 666 /var/run/docker.sock
    - sudo usermod -aG docker $USER

    - echo "üõ°Ô∏è Installing Trivy for security scanning..."
    - sudo apt-get install -y wget apt-transport-https gnupg lsb-release curl
    - curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor -o trivy.gpg
    - sudo install -o root -g root -m 644 trivy.gpg /usr/share/keyrings/
    - echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
    - sudo apt-get update && sudo apt-get install -y trivy

    # Download latest stable kubectl binary
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - kubectl version --client


    - echo "üß∞ Installing Node.js and npm (for MERN stack)..."
    - curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
    - sudo apt-get install -y nodejs
    - node -v
    - npm -v

  tags:
    - self-hosted

unit_tests:
  stage: test
  image: node:20
  script:
    - echo "Running backend unit tests..."
    - cd server && npm ci && npm run test
    - echo "Running frontend unit tests..."
    - cd ../client && npm ci && npm test
  tags:
    - self-hosted
  
trivy_fs_scan:
  stage: security
  script:
    - echo "Scanning source code for vulnerabilities..."
    - trivy fs --format table -o trivy-fs-report.html .
  tags:
    - self-hosted

sonarqube-check:
  stage: security
  image: 
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis 
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main

build_frontend_and_backend_apps:
  stage: build
  script:
    - echo "Building frontend React app will give output on /dist folder..."
    - cd client && npm ci
    - echo "Injecting backend API URL into frontend build"
    - export VITE_API_URL=http://backend-service:8080
    - npm run build

    - echo "Preparing backend (Node.js)..."
    - cd ../server && npm ci && npm run build  # Add build step if needed (e.g., TypeScript transpilation)
  tags:
    - self-hosted
  only:
    - main

docker_login_build_and_tag_image:
  stage: docker
  script:
    - echo "Logging into DockerHub..."
    - docker login -u $DOCKER_USERNAME  -p $DOCKER_PASSWORD

    - echo "Building Docker images..."
    - docker build -t $DOCKER_USERNAME/lms-frontend:latest ./client
    - docker build -t $DOCKER_USERNAME/lms-backend:latest ./server

    - echo "Scanning Docker images with Trivy..."  # --exit-code 0 means pipeline fail nahi hogi criticle vulnerabilities milne par bhi.
    - trivy image --exit-code 0 --severity HIGH,CRITICAL --format table --output trivy-frontend-image-report.txt "$DOCKER_USERNAME/lms-frontend:latest"
    - trivy image --exit-code 0 --severity HIGH,CRITICAL --format table --output trivy-backend-image-report.txt "$DOCKER_USERNAME/lms-backend:latest"


    - echo "Pushing docker image to docker hub..."
    - docker push $DOCKER_USERNAME/lms-frontend:latest
    - docker push $DOCKER_USERNAME/lms-backend:latest   

  artifacts: # image scanning ki compleate report ispe milegi
    paths:
      - trivy-backend-image-report.txt
      - trivy-frontend-image-report.txt
    when: always
    expire_in: 1 week
  tags:
    - self-hosted
  only:
    - main
    
deploy_to_kind_kubernetes_cluster:
  stage: deploy
  script:
    - echo "Deploying to k8s cluster"
    - echo "$KUBECONFIG_CONTENT" | base64 -d > ~/.kube/config

    - echo "üîê Creating backend secrets..." 
    - |
      kubectl create secret generic backend-secrets \
        --from-literal=API_KEY="$API_KEY" \
        --from-literal=API_SECRET="$API_SECRET" \
        --from-literal=CLOUD_NAME="$CLOUD_NAME" \
        --from-literal=CLOUDINARY_URL="$CLOUDINARY_URL" \
        --from-literal=STRIPE_SECRET_KEY="$STRIPE_SECRET_KEY" \
        --from-literal=STRIPE_PUBLISHABLE_KEY="$STRIPE_PUBLISHABLE_KEY" \
        --from-literal=SECRET_KEY="$SECRET_KEY" \
        --from-literal=MONGO_URI=${MONGO_URI} \
        --from-literal=PORT="$PORT" \
        --from-literal=FRONTEND_URL="$FRONTEND_URL" \
        --dry-run=client -o yaml | kubectl apply -f -

    - echo "üõ†Ô∏è Creating frontend config..."
    - |
      kubectl create configmap frontend-config \
        --from-literal=VITE_API_URL="$VITE_API_URL" \
        --dry-run=client -o yaml | kubectl apply -f -

    # üöÄ Step 3: Apply deployment + service manifests
    - echo "üì¶ Applying Kubernetes manifests..."
    - |
      if ls k8s/*.y*ml 1> /dev/null 2>&1; then
        kubectl apply -f k8s/backend-deployment.yml;
        kubectl apply -f k8s/backend-service.yml;
        kubectl apply -f k8s/frontend-deployment.yml;
        kubectl apply -f k8s/frontend-service.yml;
      else
        echo "‚ö†Ô∏è No YAML files found in k8s/ directory.";
      fi

  tags:
    - kind-local-runner
  only:
    - main


